public class Solution {
    int val = 0;
    public bool Search(int[] arr, int val)
    {
        int l = 0;
        int h = arr.Count() - 1;
        while(l<=h)
        {
            int mid = l + (h-l)/2;
            if(arr[mid]==val) return true;
            else if(arr[mid]>val) h = mid-1;
            else l = mid +1;
        }
        return false;
    }
    public bool DFS(int[][] graph,int u,bool[] visited,int[] infected, int n,int t)
    {
        visited[u] = true;
        val++;
        for(int i=0;i<n;i++)
        {
            if(i!=t && graph[u][i]==1)
            {
               
                if(Search(infected,i))
                {
                    return false;
                }
                if(!visited[i] && !DFS(graph,i,visited,infected,n,t))
                {
                    return false;
                }
            }
        }
        return true;
    }
    public int MinMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.Count();
        Array.Sort(initial);
        List<int> infected = new List<int>();
        int m = initial.Count();
        bool[] visited = new bool[n];
        
        int ans = initial[0];
        int max = 0;
        
        for(int i=0;i<m;i++)
        {
            val = 0;
            visited = new bool[n];
            if( DFS(graph,initial[i],visited,initial,n,initial[i]))
            {
                if(val>max) 
                {
                    ans = initial[i];
                    max = val;
                }
            }
        }
        return ans;
    }
}