public class Solution {
    int[] parent;
    int[] desc;
    int[] low;
    bool[] visited;
    bool[] infected;
    int time = 0;
    int[] size ;
    public int APDFS(int[][] graph, int n, int u)
    {
        int children = 0;
        visited[u] = true;
        desc[u] = time;
        low[u] = time;
        time++;
        bool isInfected = infected[u];
        int interSize = 1;
        for(int i=0;i<n;i++)
        {
            if(graph[u][i]==1)
            {
                if(!visited[i])
                {
                    parent[i] = u;
                    children++;
                    int temp = APDFS(graph,n,i);
                    interSize+=temp;
                    if(temp==0)
                    {
                        isInfected = true;
                    }
                    
                    low[u] = Math.Min(low[u],low[i]);
                    
                    if(parent[i]==-1 && children>1)
                    {
                        size[u]+=temp;
                    }
                    
                    if(parent[i]!=-1 && low[i]>=desc[u])
                    {
                        size[u]+=temp;
                    }  
                }
                else{
                    if(parent[u]!=i){
                        low[u] = Math.Min(low[u],desc[i]);
                    }
                }
            }
        }
        
        return isInfected ? 0 : interSize;
    }
    public int MinMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.Count();
        parent = new int[n];
        desc = new int[n];
        low = new int[n];
        visited = new bool[n];
        size = new int[n];
        infected = new bool[n];
        for(int i=0;i<n;i++)
        {
            parent[i] = -1;
        }
        for(int i=0;i<initial.Count();i++)
        {
            infected[initial[i]] = true;
        }
        int res = 0;
        int index = initial[0];
        
        foreach(int v in initial)
        {
                if(!visited[v])
                {
                    APDFS(graph,n,v);
                }
                if(size[v]>res || (size[v]==res && v<index))
                {
                    res = size[v];
                    index = v;
                }
            
        }
        return index;
    }
}
